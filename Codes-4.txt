//Collect all your lab codes in one program....

#include<stdio.h>
int add(int argc,char *argv[])
{
int var1,var2,sum;
if(argc<3||argc>3)
{
printf("Please Enter two values\t");
return -1; 
}
else
{
sscanf(argv[1],"%d",&var1);
sscanf(argv[2],"%d",&var2);
sum=var1+var2;
printf("THE RESULT IS: %d \n",sum);
return 0;
}
}


int file(int argc,char *argv[])
{
//Writing text from file to another
FILE *fp;
fp = fopen("/home/israa/file.txt", "w+");
if(argc<2||argc>2)
{
printf("Please Enter string\t");
return -1; 
}
else
{
fprintf(fp,argv[1],"\n");
fclose(fp);
return 0;
}
}
int simple(int argc,char *argv[])
{
FILE *fp;
fp = fopen("/home/israa/test.txt", "w+");
fprintf(fp, "This is testing for fprintf...\n");
fputs("This is testing for fputs...\n", fp);
fclose(fp);
}
int main(int argc,char *argv[])
{
if(argc==3)
return add(argc,argv);
else if(argc==2)
return file(argc,argv);
else return simple(argc,argv);
}
____________________________________________________________________________

// Write a program to build a system call "change_dir.c"

#include <pwd.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>

void print_error(char *this, char *dirname){
    fprintf(stderr, "%s cannot go to %s\n%s\n", this, dirname, strerror(errno));
  
    exit(EXIT_FAILURE);
}

void print_usage(char *this){
    fprintf(stderr, "SYNTAX ERROR:\nUsage: %s [dir_name]\n", this);

    exit(EXIT_FAILURE);
}

int main(int argc, char *argv[]){
    errno = 0;

    if(argc == 2){
        if(chdir(argv[1])){
            print_error(argv[0], argv[1]);
        }

        puts("\nThe cd command is ussualy built right into the shell");
        puts("our change_dir command is on a different process so");
        puts("the change happens but is changed back once the process ends\n");

        printf("Directory changed to %s\n", get_current_dir_name());
    }
    else if(argc == 1){
        struct passwd *user = getpwnam(getlogin());
        if(chdir(user->pw_dir)){
            print_error(argv[0], (user->pw_dir));
        }

        puts("\nThe cd command is ussualy built right into the shell");
        puts("our change_dir command is on a different process so");
        puts("the change happens but is changed back once the process ends\n");
        
        printf("Directory changed to %s\n", get_current_dir_name());
    }
    else{
        print_usage(argv[0]);
    }

    return 0;
}
__________________________________________________________________________________________